@mixin clearfix() {
    &:after {
        content: "";
        display: block;
        clear: both;
    }
}

@mixin flexbox($display: flex, $align-items: center, $justify-content: center, $flex-direction: row) {
    display: $display;
    align-items: $align-items;
    justify-content: $justify-content;
    flex-direction: $flex-direction;
}

@mixin align-horizontally($position: absolute, $top: unset, $bottom: unset) {
    position: $position;
    top: $top;
    bottom: $bottom;
    left: 50%;
    transform: translateX(-50%);
}

@mixin grid($grid-gap: $gutter-size/2, $align-items: center, $justify-items: baseline) {
    display: grid;
    grid-gap: $grid-gap;
    align-items: $align-items;
    justify-items: $justify-items;
}

@mixin respond-to($media) {
    @if $media == phone {
        @media only screen and (max-width: $xs-screen) {
            @content;
        }
    } @else if $media == not-phone {
        @media only screen and (min-width: $xs-screen + 1) {
            @content;
        }
    } @else if $media == small {
        @media only screen and (max-width: $small-screen) {
            @content;
        }
    } @else if $media == not-small {
        @media only screen and (min-width: $small-screen + 1) {
            @content;
        }
    } @else if $media == medium {
        @media only screen and (max-width: $medium-screen) {
            @content;
        }
    } @else if $media == not-medium {
        @media only screen and (min-width: $medium-screen + 1) {
            @content;
        }
    } @else if $media == not-large {
        @media only screen and (max-width: $large-screen) {
            @content;
        }
    } @else if $media == large {
        @media only screen and (min-width: $cvo-large-screen + 1) {
            @content;
        }
    } @else if $media == xl {
        @media only screen and (min-width: $cvo-xl-screen + 1) {
            @content;
        }
    }
}

@mixin centerElement() {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin opacity($opacity: $opacity-hover) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin position-absolute($top: unset, $right: unset, $bottom: unset, $left: unset) {
    position: absolute;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

@mixin blurry($color: $color-1, $blur: $gutter-size, $background-transparency: 0.7) {
    /* slightly transparent fallback for Firefox */
    background-color: rgba($color, $opacity-hover);
    /* if backdrop support: very transparent and blurred */
    @supports ((-webkit-backdrop-filter: blur($blur)) or (backdrop-filter: blur($blur))) {
        backdrop-filter: blur($blur);
        background-color: rgba($color, $background-transparency);
    }
}
